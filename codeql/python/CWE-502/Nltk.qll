/**
 * Reference for variant analysis using nltk commit
 * https://github.com/nltk/nltk/commit/a12d0a6a8cdba58d5e4e5f92ac62bb80fc26c624#diff-e8ce00f6831178703da6452dbf38fe7e1b746d7891a6fc98f6cfa6a735407dc2R667
 */

import python
import semmle.python.dataflow.new.DataFlow
import semmle.python.dataflow.new.RemoteFlowSources
import semmle.python.Concepts

// Module for NLTK-specific vulnerability detection
module Nltk {
    /** 
     * Identifies urlopen calls as a source of untrusted data
     * Extends RemoteFlowSource::Range to mark it as a source of remote/untrusted input
     */
    class Nltkurlopen extends RemoteFlowSource::Range {
        // Constructor defining when this class matches
        Nltkurlopen() {
            exists(Call urlopen |
                // Match any function call named "urlopen"
                urlopen.getFunc().(Name).toString() = "urlopen" and
                // Convert the matched call to a dataflow expression
                this.asExpr() = urlopen
            )
        }
        // Required override to specify the type of source
        override string getSourceType() { result = "urlopen source" }
    }
}

/**
 * Experimental section
 * Would track network resources more generally by:
 * - Looking for function calls
 * - Within functions that have parameters
 * - Where the call is assigned to a variable
 */
//  import python
//  import semmle.python.dataflow.new.DataFlow
//  import semmle.python.dataflow.new.RemoteFlowSources
//  import semmle.python.Concepts
//  
//  class NetworkResourceSource extends RemoteFlowSource::Range {
//    NetworkResourceSource() {
//      exists(Call call, AssignStmt assign |
//        assign.getValue() = call and
//        exists(Function f |
//          f = call.getScope() and
//          exists(Parameter p | p = f.getArg(_))
//        ) and
//        this.asExpr() = call
//      )
//    }
//    override string getSourceType() { result = "External resource input" }
//  }
